// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name LuneSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Charts
import Combine
import DeveloperToolsSupport
import Foundation
@_exported import LuneSDK
import PhotosUI
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _PhotosUI_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
extension LuneSDK.LuneField {
  public struct ValueState {
  }
}
extension LuneSDK.LuneField {
  public struct FocusState {
  }
}
extension LuneSDK.LuneField {
  public struct Configuration {
    public init() where UITextFieldType == LuneSDK.BaseLuneField
    public init(_ makeUITextField: @escaping () -> UITextFieldType)
  }
}
extension LuneSDK.LuneField.Configuration {
  public func value(updateViewValue: @escaping (_ textField: UITextFieldType) -> Swift.Void, onViewValueChanged: @escaping (_ textField: UITextFieldType) -> Swift.Void) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func value(text: SwiftUICore.Binding<Swift.String>) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func value(text: SwiftUICore.Binding<Swift.String>, onFieldValueChanged: ((_ textField: UITextFieldType) -> Swift.Void)?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  @available(iOS 15.0, *)
  public func value<F>(value: SwiftUICore.Binding<F.FormatInput>, format: F) -> LuneSDK.LuneField<UITextFieldType>.Configuration where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  @available(iOS 15.0, *)
  public func value<F>(value: SwiftUICore.Binding<F.FormatInput?>, format: F) -> LuneSDK.LuneField<UITextFieldType>.Configuration where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  public func value<V>(value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func value<V>(value: SwiftUICore.Binding<V?>, formatter: Foundation.Formatter) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func allowEmoji(_ shouldAllow: Swift.Bool?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func placeholder(_ placeholder: Swift.String?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func font(_ font: UIKit.UIFont?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func textColor(_ color: SwiftUICore.Color?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func textAlignment(_ textAlignment: UIKit.NSTextAlignment?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func clearsOnBeginEditing(_ clearsOnBeginEditing: Swift.Bool?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func clearsOnInsertion(_ clearsOnInsertion: Swift.Bool?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func clearButtonMode(_ clearButtonMode: UIKit.UITextField.ViewMode?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func focused(_ binding: SwiftUICore.Binding<Swift.Bool>) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func focused<Value>(_ binding: SwiftUICore.Binding<Value?>, equals value: Value?) -> LuneSDK.LuneField<UITextFieldType>.Configuration where Value : Swift.Hashable
  public func stretches(horizontal: Swift.Bool, vertical: Swift.Bool) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func inputView(content: LuneSDK.LuneInputViewContent<UITextFieldType>) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func inputAccessoryView(content: LuneSDK.LuneInputViewContent<UITextFieldType>) -> LuneSDK.LuneField<UITextFieldType>.Configuration
}
extension LuneSDK.LuneField.Configuration {
  public func configure(handler: @escaping (_ uiTextField: UITextFieldType) -> Swift.Void) -> LuneSDK.LuneField<UITextFieldType>.Configuration
}
extension LuneSDK.LuneField.Configuration {
  public func shouldBeginEditing(handler: @escaping (_ uiTextField: UITextFieldType) -> Swift.Bool) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func onBeganEditing(handler: @escaping (_ uiTextField: UITextFieldType) -> Swift.Void) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func shouldEndEditing(handler: @escaping (_ uiTextField: UITextFieldType) -> Swift.Bool) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func onEndedEditing(handler: @escaping (_ uiTextField: UITextFieldType, _ reason: UIKit.UITextField.DidEndEditingReason) -> Swift.Void) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func shouldChangeCharacters(handler: @escaping (_ uiTextField: UITextFieldType, _ range: Foundation.NSRange, _ replacementString: Swift.String) -> Swift.Bool) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func onChangedSelection(handler: @escaping (_ uiTextField: UITextFieldType) -> Swift.Void) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func shouldClear(handler: @escaping (_ uiTextField: UITextFieldType) -> Swift.Bool) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func shouldReturn(handler: @escaping (_ uiTextField: UITextFieldType) -> Swift.Bool) -> LuneSDK.LuneField<UITextFieldType>.Configuration
}
extension Swift.String : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
public enum SaveFrequency : Swift.String, Swift.Codable, Swift.CodingKey, Swift.Hashable, Swift.CaseIterable {
  case monthly
  case weekly
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias AllCases = [LuneSDK.SaveFrequency]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [LuneSDK.SaveFrequency] {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct BrandListView {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7LuneSDK13BrandListViewV4bodyQrvp", 0) __
}

public enum BudgetRecurrenceOption : Swift.String, Swift.Identifiable, Swift.Codable, Swift.CodingKey, Swift.Hashable, Swift.CaseIterable {
  case week
  case month
  public var id: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias AllCases = [LuneSDK.BudgetRecurrenceOption]
  public typealias ID = Swift.String
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [LuneSDK.BudgetRecurrenceOption] {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct TagField : SwiftUICore.View {
  @SwiftUICore.Binding @_projectedValueProperty($tags) @_Concurrency.MainActor @preconcurrency public var tags: [Swift.String] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $tags: SwiftUICore.Binding<[Swift.String]> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7LuneSDK8TagFieldV4bodyQrvp", 0) __
}
extension LuneSDK.TagField {
  @_Concurrency.MainActor @preconcurrency public func lowercase(_ bool: Swift.Bool) -> LuneSDK.TagField
}
@available(iOS 13, macOS 11, *)
@_Concurrency.MainActor @preconcurrency public struct AlertToast : SwiftUICore.View {
  public enum BannerAnimation {
    case slide, pop
    public static func == (a: LuneSDK.AlertToast.BannerAnimation, b: LuneSDK.AlertToast.BannerAnimation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DisplayMode : Swift.Equatable {
    case alert
    case hud
    case banner(_: LuneSDK.AlertToast.BannerAnimation)
    public static func == (a: LuneSDK.AlertToast.DisplayMode, b: LuneSDK.AlertToast.DisplayMode) -> Swift.Bool
  }
  public enum AlertType : Swift.Equatable {
    case complete(_: SwiftUICore.Color)
    case error(_: SwiftUICore.Color)
    case systemImage(_: Swift.String, _: SwiftUICore.Color)
    case image(_: Swift.String, _: SwiftUICore.Color)
    case loading
    case regular
    public static func == (a: LuneSDK.AlertToast.AlertType, b: LuneSDK.AlertToast.AlertType) -> Swift.Bool
  }
  public enum AlertStyle : Swift.Equatable {
    case style(backgroundColor: SwiftUICore.Color? = nil, titleColor: SwiftUICore.Color? = nil, subTitleColor: SwiftUICore.Color? = nil, titleFont: SwiftUICore.Font? = nil, subTitleFont: SwiftUICore.Font? = nil, borderRadius: Swift.Double? = nil)
    public static func == (a: LuneSDK.AlertToast.AlertStyle, b: LuneSDK.AlertToast.AlertStyle) -> Swift.Bool
  }
  @_Concurrency.MainActor @preconcurrency public var displayMode: LuneSDK.AlertToast.DisplayMode
  @_Concurrency.MainActor @preconcurrency public var type: LuneSDK.AlertToast.AlertType
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String?
  @_Concurrency.MainActor @preconcurrency public var subTitle: Swift.String?
  @_Concurrency.MainActor @preconcurrency public var style: LuneSDK.AlertToast.AlertStyle?
  @_Concurrency.MainActor @preconcurrency public init(displayMode: LuneSDK.AlertToast.DisplayMode = .alert, type: LuneSDK.AlertToast.AlertType, title: Swift.String? = nil, subTitle: Swift.String? = nil, style: LuneSDK.AlertToast.AlertStyle? = nil)
  @_Concurrency.MainActor @preconcurrency public init(displayMode: LuneSDK.AlertToast.DisplayMode, type: LuneSDK.AlertToast.AlertType, title: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public var banner: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var hud: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var alert: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13, macOS 11, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7LuneSDK10AlertToastV4bodyQrvp", 0) __
}
@available(iOS 13, macOS 11, *)
@_Concurrency.MainActor @preconcurrency public struct AlertToastModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func main() -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func body(content: LuneSDK.AlertToastModifier.Content) -> some SwiftUICore.View
  
  @available(iOS 13, macOS 11, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7LuneSDK18AlertToastModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func toast(isPresenting: SwiftUICore.Binding<Swift.Bool>, duration: Swift.Double = 2, tapToDismiss: Swift.Bool = true, offsetY: CoreFoundation.CGFloat = 0, alert: @escaping () -> LuneSDK.AlertToast, onTap: (() -> Swift.Void)? = nil, completion: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
}
@propertyWrapper @_Concurrency.MainActor @preconcurrency public struct StateObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject, ObjectType.ObjectWillChangePublisher == Combine.ObservableObjectPublisher {
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: ObjectType {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUICore.ObservedObject<ObjectType>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(wrappedValue thunk: @autoclosure @escaping () -> ObjectType)
  @_Concurrency.MainActor @preconcurrency public mutating func update()
}
@_Concurrency.MainActor @preconcurrency public struct BottomSheet<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7LuneSDK11BottomSheetV4bodyQrvp", 0) __<Content>
}
@objc public class LuneSDKObjcManager : ObjectiveC.NSObject, Combine.ObservableObject {
  @objc public init(baseUrl: Swift.String = "https://staging.pfm.lunedata.io/api", token: Swift.String, localizationTableName: Swift.String? = nil)
  @objc public func CategorySpendChartComponent(startDate: Swift.String? = nil, endDate: Swift.String? = nil) -> UIKit.UIViewController
  @objc public func BrandListComponent() -> UIKit.UIViewController
  @objc public func TransactionListComponent() -> UIKit.UIViewController
  @objc public func BudgetComponent() -> UIKit.UIViewController
  @objc public func CashflowComponent() -> UIKit.UIViewController
  @objc public func CashflowChartComponent(startDate: Swift.String? = nil, endDate: Swift.String? = nil) -> UIKit.UIViewController
  @objc public func CategoryTrendChartComponent(startDate: Swift.String? = nil, endDate: Swift.String? = nil, excludeTransfers: Swift.Bool = false) -> UIKit.UIViewController
  @objc public func BrandTrendChartComponent(startDate: Swift.String? = nil, endDate: Swift.String? = nil, excludeTransfers: Swift.Bool = false) -> UIKit.UIViewController
  @objc public func CategorySpendListComponent() -> UIKit.UIViewController
  @objc public func TransactionDetailComponent(id: Swift.String, withNotes: Swift.Bool = true) -> UIKit.UIViewController
  @objc public func BrandTrendsComponent() -> UIKit.UIViewController
  @objc public func CategoryTrendsComponent() -> UIKit.UIViewController
  @objc public func ExpenseComponent() -> UIKit.UIViewController
  @objc public func initializeLogger(logger: @escaping ([Swift.String : Any]) -> Swift.Void)
  @objc public func setUpSuccessNotifier(_ notifier: @escaping (Swift.String) -> Swift.Void)
  @objc public func setUpErrorNotifier(_ notifier: @escaping (Swift.String) -> Swift.Void)
  @objc public func setUpErrorLogger(_ logger: @escaping (LuneSDK.LuneError) -> Swift.Void)
  @objc public func setupRefreshCallback(_ callback: ((@escaping (Swift.String?) -> Swift.Void) -> Swift.Void)?)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct BudgetBar : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7LuneSDK9BudgetBarV4bodyQrvp", 0) __
}
extension LuneSDK.LuneField {
  @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class Coordinator : ObjectiveC.NSObject, UIKit.UITextFieldDelegate {
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldShouldBeginEditing(_: UIKit.UITextField) -> Swift.Bool
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidBeginEditing(_: UIKit.UITextField)
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldShouldEndEditing(_: UIKit.UITextField) -> Swift.Bool
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidEndEditing(_: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
    @_Concurrency.MainActor @preconcurrency @objc public func textField(_: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString: Swift.String) -> Swift.Bool
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidChangeSelection(_: UIKit.UITextField)
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldShouldClear(_: UIKit.UITextField) -> Swift.Bool
    @_Concurrency.MainActor @preconcurrency @objc public func textFieldShouldReturn(_: UIKit.UITextField) -> Swift.Bool
    @objc deinit
  }
}
public struct BudgetCategoryUpdate : Swift.Codable, Swift.Equatable, Swift.Hashable, Swift.Identifiable {
  public var id: Swift.Int {
    get
  }
  public static func == (a: LuneSDK.BudgetCategoryUpdate, b: LuneSDK.BudgetCategoryUpdate) -> Swift.Bool
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.BudgetCategoryUpdate {
  public init(data: Foundation.Data) throws
  public init(_ json: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
  public init(fromURL url: Foundation.URL) throws
  public func with(categoryId: Swift.Int? = nil, budgetedAmount: Swift.Double? = nil) -> LuneSDK.BudgetCategoryUpdate
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
}
public struct CategorySpend : Swift.Codable, Swift.Equatable, Swift.Identifiable {
  public let count: Swift.Int
  public let amount: Swift.Double
  public var id: Swift.Int {
    get
  }
  public static func == (a: LuneSDK.CategorySpend, b: LuneSDK.CategorySpend) -> Swift.Bool
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.CategorySpend {
  public init(data: Foundation.Data) throws
  public init(_ json: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
  public init(fromURL url: Foundation.URL) throws
  public func with(categoryID: Swift.Int? = nil, categoryDesc: Swift.String? = nil, count: Swift.Int? = nil, amount: Swift.Double? = nil, category: LuneSDK.Category? = nil) -> LuneSDK.CategorySpend
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
}

public enum SavingAllocationType : Swift.String, Swift.Codable, Swift.CodingKey, Swift.Hashable, Swift.CaseIterable {
  case equal
  case percentage
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias AllCases = [LuneSDK.SavingAllocationType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [LuneSDK.SavingAllocationType] {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public struct LuneResponse<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public var data: T?
  public let success: Swift.Bool?
  public let message: Swift.String?
  public var next: Swift.String?
  public var previous: Swift.String?
  public var count: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.LuneResponse {
  public init(data: Foundation.Data) throws
  public init(_ json: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
  public init(fromURL url: Foundation.URL) throws
  public func with(data: T? = nil, success: Swift.Bool? = nil, message: Swift.String? = nil, next: Swift.String? = nil, previous: Swift.String? = nil, count: Swift.Int? = nil) -> LuneSDK.LuneResponse<T>
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
}
public struct BudgetCategory : Swift.Codable, Swift.Equatable, Swift.Hashable, Swift.Identifiable {
  public var id: Swift.Int {
    get
  }
  public static func == (a: LuneSDK.BudgetCategory, b: LuneSDK.BudgetCategory) -> Swift.Bool
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.BudgetCategory {
  public init(data: Foundation.Data) throws
  public init(_ json: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
  public init(fromURL url: Foundation.URL) throws
  public func with(budgetedAmount: Swift.Double? = nil, spentAmount: Swift.Double? = nil, transactionsCount: Swift.Int? = nil, category: LuneSDK.Category? = nil) -> LuneSDK.BudgetCategory
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
}
@_Concurrency.MainActor @preconcurrency public struct SVGView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7LuneSDK7SVGViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct TransactionListView {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7LuneSDK19TransactionListViewV4bodyQrvp", 0) __
}
public struct LuneTokenResponse : Swift.Codable {
  public let refresh: Swift.String?
  public let access: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.LuneTokenResponse {
  public init(data: Foundation.Data) throws
  public init(_ json: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
  public init(fromURL url: Foundation.URL) throws
  public func with(refresh: Swift.String? = nil, access: Swift.String? = nil) -> LuneSDK.LuneTokenResponse
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
}
public enum GoalSettingStage : Swift.String, Swift.Codable, Swift.CodingKey, Swift.Hashable, Swift.CaseIterable {
  case type
  case plan
  case summary
  case feedback
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias AllCases = [LuneSDK.GoalSettingStage]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [LuneSDK.GoalSettingStage] {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public struct Cashflow : Swift.Codable, Swift.Equatable {
  public static func == (a: LuneSDK.Cashflow, b: LuneSDK.Cashflow) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.Cashflow {
  public init(data: Foundation.Data) throws
  public init(_ json: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
  public init(fromURL url: Foundation.URL) throws
  public func with(totalSpend: Swift.Double? = nil, totalIncome: Swift.Double? = nil, startDate: Swift.String? = nil, endDate: Swift.String? = nil) -> LuneSDK.Cashflow
  public var difference: Swift.Double {
    get
  }
  public var signifiesLoss: Swift.Bool {
    get
  }
  public var summaryTexts: [Swift.String] {
    get
  }
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
  public var expenseDatePickerHeader: LuneSDK.DatePickerHeader {
    get
  }
  public var incomeDatePickerHeader: LuneSDK.DatePickerHeader {
    get
  }
}
@available(iOS 13, *)
@_Concurrency.MainActor @preconcurrency public struct BlurView : SwiftUI.UIViewRepresentable {
  public typealias UIViewType = UIKit.UIVisualEffectView
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: LuneSDK.BlurView.Context) -> UIKit.UIVisualEffectView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: UIKit.UIVisualEffectView, context: LuneSDK.BlurView.Context)
  @available(iOS 13, *)
  public typealias Body = Swift.Never
  @available(iOS 13, *)
  public typealias Coordinator = Swift.Void
}
public struct LocaleFont : Swift.Codable {
  public init(regular: Swift.String, ultraLight: Swift.String? = nil, light: Swift.String? = nil, thin: Swift.String? = nil, medium: Swift.String? = nil, semibold: Swift.String? = nil, bold: Swift.String? = nil, heavy: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.LocaleFont {
  public init(data: Foundation.Data) throws
  public init(_ json: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
  public init(fromURL url: Foundation.URL) throws
  public func with(regular: Swift.String? = nil, ultraLight: Swift.String? = nil, light: Swift.String? = nil, thin: Swift.String? = nil, medium: Swift.String? = nil, semibold: Swift.String? = nil, bold: Swift.String? = nil, heavy: Swift.String? = nil) -> LuneSDK.LocaleFont
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
}
public struct DatePickerHeader {
}
public struct LuneHeader {
}

public enum SavingsRoundAnchor : Swift.String, Swift.Codable, Swift.CodingKey, Swift.Hashable, Swift.CaseIterable {
  case one
  case five
  case ten
  case twenty
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias AllCases = [LuneSDK.SavingsRoundAnchor]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [LuneSDK.SavingsRoundAnchor] {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class BaseLuneField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var inputViewController: UIKit.UIInputViewController? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var inputAccessoryViewController: UIKit.UIInputViewController? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension LuneSDK.BaseLuneField : LuneSDK.LuneFieldProtocol {
}
@_Concurrency.MainActor @preconcurrency public struct ExpenseChart {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7LuneSDK12ExpenseChartV4bodyQrvp", 0) __
}
@propertyWrapper public struct NullCodable<Wrapped> {
  public var wrappedValue: Wrapped?
  public init(wrappedValue: Wrapped?)
}
extension LuneSDK.NullCodable : Swift.Encodable where Wrapped : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension LuneSDK.NullCodable : Swift.Decodable where Wrapped : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.NullCodable : Swift.Equatable where Wrapped : Swift.Equatable {
  public static func == (a: LuneSDK.NullCodable<Wrapped>, b: LuneSDK.NullCodable<Wrapped>) -> Swift.Bool
}
extension LuneSDK.NullCodable : Swift.Sendable where Wrapped : Swift.Sendable {
}
extension Swift.KeyedDecodingContainer {
  public func decode<Wrapped>(_ type: LuneSDK.NullCodable<Wrapped>.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> LuneSDK.NullCodable<Wrapped> where Wrapped : Swift.Decodable
}

public protocol LuneFieldProtocol : UIKit.UITextField {
  var inputViewController: UIKit.UIInputViewController? { get set }
  var inputAccessoryViewController: UIKit.UIInputViewController? { get set }
}
public struct BrandSpend : Swift.Codable, Swift.Equatable, Swift.Identifiable {
  public var id: Swift.Int {
    get
  }
  public var queryId: Swift.String {
    get
  }
  public static func == (a: LuneSDK.BrandSpend, b: LuneSDK.BrandSpend) -> Swift.Bool
  public typealias ID = Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.BrandSpend {
  public init(data: Foundation.Data) throws
  public init(_ json: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
  public init(fromURL url: Foundation.URL) throws
  public func with(brandID: Swift.Int? = nil, brandName: Swift.String? = nil, brandLogoURL: Swift.String? = nil, currencyCode: Swift.String? = nil, amount: Swift.Double? = nil, transactionCount: Swift.Int? = nil) -> LuneSDK.BrandSpend
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
  public static var emptyValue: LuneSDK.BrandSpend {
    get
  }
}

public enum PlanType : Swift.String, Swift.Codable, Swift.CodingKey, Swift.Hashable, Swift.CaseIterable {
  case date
  case amount
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias AllCases = [LuneSDK.PlanType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [LuneSDK.PlanType] {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public struct FontConfig : Swift.Codable {
  public init(latin: LuneSDK.LocaleFont, arabic: LuneSDK.LocaleFont? = nil, greek: LuneSDK.LocaleFont? = nil, cyrillic: LuneSDK.LocaleFont? = nil, hebrew: LuneSDK.LocaleFont? = nil, chinese: LuneSDK.LocaleFont? = nil, japanese: LuneSDK.LocaleFont? = nil, korean: LuneSDK.LocaleFont? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.FontConfig {
  public init(data: Foundation.Data) throws
  public init(_ json: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
  public init(fromURL url: Foundation.URL) throws
  public func with(latin: LuneSDK.LocaleFont? = nil, arabic: LuneSDK.LocaleFont? = nil, greek: LuneSDK.LocaleFont? = nil, cyrillic: LuneSDK.LocaleFont? = nil, hebrew: LuneSDK.LocaleFont? = nil, chinese: LuneSDK.LocaleFont? = nil, japanese: LuneSDK.LocaleFont? = nil, korean: LuneSDK.LocaleFont? = nil) -> LuneSDK.FontConfig
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper public struct PublishedObject<Value> {
  public init(wrappedValue: Value) where Value : Combine.ObservableObject, Value.ObjectWillChangePublisher == Combine.ObservableObjectPublisher
  public init<V>(wrappedValue: V?) where Value == V?, V : Combine.ObservableObject, V.ObjectWillChangePublisher == Combine.ObservableObjectPublisher
  public var wrappedValue: Value {
    get
    set
  }
  public static subscript<EnclosingSelf>(_enclosingInstance observed: EnclosingSelf, wrapped wrappedKeyPath: Swift.ReferenceWritableKeyPath<EnclosingSelf, Value>, storage storageKeyPath: Swift.ReferenceWritableKeyPath<EnclosingSelf, LuneSDK.PublishedObject<Value>>) -> Value where EnclosingSelf : Combine.ObservableObject, EnclosingSelf.ObjectWillChangePublisher == Combine.ObservableObjectPublisher {
    get
    set
  }
  public static subscript<EnclosingSelf>(_enclosingInstance observed: EnclosingSelf, projected wrappedKeyPath: Swift.KeyPath<EnclosingSelf, LuneSDK.PublishedObject<Value>.Publisher>, storage storageKeyPath: Swift.ReferenceWritableKeyPath<EnclosingSelf, LuneSDK.PublishedObject<Value>>) -> LuneSDK.PublishedObject<Value>.Publisher where EnclosingSelf : Combine.ObservableObject, EnclosingSelf.ObjectWillChangePublisher == Combine.ObservableObjectPublisher {
    get
  }
  public typealias Publisher = Combine.AnyPublisher<Value, Swift.Never>
  public var projectedValue: LuneSDK.PublishedObject<Value>.Publisher {
    mutating get
  }
}
@_Concurrency.MainActor @preconcurrency public struct Shimmer : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(animation: SwiftUICore.Animation = Self.defaultAnimation, gradient: SwiftUICore.Gradient = Self.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3)
  @_Concurrency.MainActor @preconcurrency public static let defaultAnimation: SwiftUICore.Animation
  @_Concurrency.MainActor @preconcurrency public static let defaultGradient: SwiftUICore.Gradient
  @_Concurrency.MainActor @preconcurrency public func body(content: LuneSDK.Shimmer.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7LuneSDK7ShimmerV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func shimmer(active: Swift.Bool = true, animation: SwiftUICore.Animation = Shimmer.defaultAnimation, gradient: SwiftUICore.Gradient = Shimmer.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3) -> some SwiftUICore.View
  
  @available(*, deprecated, message: "Use shimmering(active:animation:gradient:bandSize:) instead.")
  @_Concurrency.MainActor @preconcurrency public func shimmer(active: Swift.Bool = true, duration: Swift.Double, bounce: Swift.Bool = false, delay: Swift.Double = 0.25) -> some SwiftUICore.View
  
}
extension SwiftUICore.Color {
  public var uiColor: UIKit.UIColor {
    get
  }
  public struct ColorComponents {
  }
  public var components: SwiftUICore.Color.ColorComponents {
    get
  }
  public init(hexString: Swift.String)
  public static func random() -> SwiftUICore.Color
  public func lighter(by percentage: CoreFoundation.CGFloat = 30.0) -> SwiftUICore.Color
  public func darker(by percentage: CoreFoundation.CGFloat = 30.0) -> SwiftUICore.Color
  public func adjust(by percentage: CoreFoundation.CGFloat = 30.0) -> SwiftUICore.Color
}
@_Concurrency.MainActor @preconcurrency public struct LuneField<UITextFieldType> : SwiftUI.UIViewRepresentable where UITextFieldType : LuneSDK.LuneFieldProtocol {
  public typealias UIViewType = UITextFieldType
  @_Concurrency.MainActor @preconcurrency public init(config: LuneSDK.LuneField<UITextFieldType>.Configuration)
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> LuneSDK.LuneField<UITextFieldType>.Coordinator
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: LuneSDK.LuneField<UITextFieldType>.Context) -> UITextFieldType
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ textField: UITextFieldType, context: LuneSDK.LuneField<UITextFieldType>.Context)
  public typealias Body = Swift.Never
}
extension UIKit.UIEdgeInsets {
  public static let defaultTextFieldContainerInset: UIKit.UIEdgeInsets
}

public struct LuneTransaction : Swift.Codable, Swift.Hashable, Swift.Equatable {
  public let id: Swift.Int
  public let brandName: Swift.String?
  public static func == (a: LuneSDK.LuneTransaction, b: LuneSDK.LuneTransaction) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.LuneTransaction {
  public init(data: Foundation.Data) throws
  public init(_ json: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
  public init(fromURL url: Foundation.URL) throws
  public func with(id: Swift.Int? = nil, transactionDate: Swift.String? = nil, userNote: Swift.String? = nil, globalTxID: Swift.String? = nil, rawDescription: Swift.String? = nil, categoryID: Swift.Int? = nil, brandName: Swift.String? = nil, brandLogo: Swift.String? = nil, currencyCode: Swift.String? = nil, amount: Swift.Double? = nil, roundedAmount: Swift.Double? = nil, isBrandValid: Swift.Bool? = nil, isLogoValid: Swift.Bool? = nil, userEditedBrandName: Swift.String? = nil, isCategoryValid: Swift.Bool? = nil, userEditedCategoryId: Swift.Int? = nil, userEditedCategoryName: Swift.String? = nil, tags: [Swift.String]? = nil, review: LuneSDK.Review? = nil, category: LuneSDK.Category? = nil, suggestedCategory: LuneSDK.Category? = nil) -> LuneSDK.LuneTransaction
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
}
public struct Review : Swift.Codable, Swift.Hashable {
  public static func == (a: LuneSDK.Review, b: LuneSDK.Review) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Category : Swift.Codable, Swift.Hashable {
  public static func == (a: LuneSDK.Category, b: LuneSDK.Category) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LuneInputViewContent<UITextFieldType> where UITextFieldType : LuneSDK.LuneFieldProtocol {
  public static func view<Content>(@SwiftUICore.ViewBuilder content: @escaping (_ uiTextField: UITextFieldType) -> Content) -> LuneSDK.LuneInputViewContent<UITextFieldType> where Content : SwiftUICore.View
  public static var none: LuneSDK.LuneInputViewContent<UITextFieldType> {
    get
  }
}
public class LuneSDKManager : Combine.ObservableObject {
  public init(baseUrl: Swift.String = "http://20.174.36.8/api", token: Swift.String, localizationTableName: Swift.String? = nil)
  public func CategorySpendChartComponent(startDate: Swift.String? = nil, endDate: Swift.String? = nil) -> some SwiftUICore.View
  
  public func CashflowChartComponent(startDate: Swift.String? = nil, endDate: Swift.String? = nil) -> some SwiftUICore.View
  
  public func CategoryTrendChartComponent(startDate: Swift.String? = nil, endDate: Swift.String? = nil, excludeTransfers: Swift.Bool = false) -> some SwiftUICore.View
  
  public func BrandTrendChartComponent(startDate: Swift.String? = nil, endDate: Swift.String? = nil, excludeTransfers: Swift.Bool = false) -> some SwiftUICore.View
  
  public func BrandListComponent() -> some SwiftUICore.View
  
  public func TransactionListComponent() -> some SwiftUICore.View
  
  public func BudgetComponent() -> some SwiftUICore.View
  
  public func CashflowComponent(slotContent: () -> some View = { EmptyView() }) -> some SwiftUICore.View
  
  public func CategorySpendListComponent() -> some SwiftUICore.View
  
  public func TransactionDetailComponent(id: Swift.String, withNotes: Swift.Bool = true) -> some SwiftUICore.View
  
  public func SavingsComponent() -> some SwiftUICore.View
  
  public func BrandTrendsComponent() -> some SwiftUICore.View
  
  public func CategoryTrendsComponent() -> some SwiftUICore.View
  
  public func ExpenseComponent(slotContent: () -> some View = { EmptyView() }) -> some SwiftUICore.View
  
  public func initializeLogger(logger: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func setUpSuccessNotifier(_ notifier: @escaping (Swift.String) -> Swift.Void)
  public func setUpErrorNotifier(_ notifier: @escaping (Swift.String) -> Swift.Void)
  public func setUpErrorLogger(_ logger: @escaping (LuneSDK.LuneError) -> Swift.Void)
  public func setupRefreshCallback(_ callback: (() async -> Swift.String?)?)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct TransactionUpdate : Swift.Codable, Swift.Equatable {
  public static func == (a: LuneSDK.TransactionUpdate, b: LuneSDK.TransactionUpdate) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension LuneSDK.TransactionUpdate {
  public init(data: Foundation.Data) throws
  public init(_ json: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
  public init(fromURL url: Foundation.URL) throws
  public func with(id: Swift.Int?? = nil, isBrandValid: Swift.Bool?? = nil, isLogoValid: Swift.Bool?? = nil, userEditedBrandName: Swift.String?? = nil, isCategoryValid: Swift.Bool?? = nil, userEditedCategoryId: Swift.Int?? = nil, userEditedCategoryName: Swift.String?? = nil, note: Swift.String?? = nil, tags: [Swift.String]? = nil) -> LuneSDK.TransactionUpdate
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
  public func map() -> [Swift.String : Any]
}
extension LuneSDK.LuneField.Configuration {
  public func keyboardType(_ keyboardType: UIKit.UIKeyboardType?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func keyboardAppearance(_ keyboardAppearance: UIKit.UIKeyboardAppearance?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func returnKeyType(_ returnKeyType: UIKit.UIReturnKeyType?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func textContentType(_ textContentType: UIKit.UITextContentType?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func isSecureTextEntry(_ isSecureTextEntry: Swift.Bool?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func enablesReturnKeyAutomatically(_ enablesReturnKeyAutomatically: Swift.Bool?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func autocapitalizationType(_ autocapitalizationType: UIKit.UITextAutocapitalizationType?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func autocorrectionType(_ autocorrectionType: UIKit.UITextAutocorrectionType?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func spellCheckingType(_ spellCheckingType: UIKit.UITextSpellCheckingType?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func smartQuotesType(_ smartQuotesType: UIKit.UITextSmartQuotesType?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func smartDashesType(_ smartDashesType: UIKit.UITextSmartDashesType?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
  public func smartInsertDeleteType(_ smartInsertDeleteType: UIKit.UITextSmartInsertDeleteType?) -> LuneSDK.LuneField<UITextFieldType>.Configuration
}
@_hasMissingDesignatedInitializers @objc public class LuneError : ObjectiveC.NSObject, Swift.Error {
  final public let message: Swift.String
  final public let underlyingError: (any Swift.Error)?
  @objc deinit
}
extension LuneSDK.LuneField : Swift.Sendable {}
extension LuneSDK.TransactionListView : SwiftUICore.View {}
extension LuneSDK.TransactionListView : Swift.Sendable {}
extension LuneSDK.BrandListView : SwiftUICore.View {}
extension LuneSDK.BrandListView : Swift.Sendable {}
extension LuneSDK.SaveFrequency : Swift.RawRepresentable {}
extension LuneSDK.BudgetRecurrenceOption : Swift.RawRepresentable {}
extension LuneSDK.TagField : Swift.Sendable {}
@available(iOS 13, macOS 11, *)
extension LuneSDK.AlertToast : Swift.Sendable {}
@available(iOS 13, macOS 11, *)
extension LuneSDK.AlertToast.BannerAnimation : Swift.Equatable {}
@available(iOS 13, macOS 11, *)
extension LuneSDK.AlertToast.BannerAnimation : Swift.Hashable {}
@available(iOS 13, macOS 11, *)
extension LuneSDK.AlertToastModifier : Swift.Sendable {}
extension LuneSDK.StateObject : Swift.Sendable {}
extension LuneSDK.BottomSheet : Swift.Sendable {}
extension LuneSDK.BudgetBar : Swift.Sendable {}
extension LuneSDK.LuneField.Coordinator : Swift.Sendable {}
extension LuneSDK.SavingAllocationType : Swift.RawRepresentable {}
extension LuneSDK.ExpenseChart : SwiftUICore.View {}
extension LuneSDK.ExpenseChart : Swift.Sendable {}
extension LuneSDK.SVGView : Swift.Sendable {}
extension LuneSDK.GoalSettingStage : Swift.RawRepresentable {}
@available(iOS 13, *)
extension LuneSDK.BlurView : Swift.Sendable {}
extension LuneSDK.SavingsRoundAnchor : Swift.RawRepresentable {}
extension LuneSDK.PlanType : Swift.RawRepresentable {}
extension LuneSDK.Shimmer : Swift.Sendable {}

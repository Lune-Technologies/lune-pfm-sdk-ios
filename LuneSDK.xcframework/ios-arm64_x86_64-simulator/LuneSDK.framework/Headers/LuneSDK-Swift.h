#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef LUNESDK_SWIFT_H
#define LUNESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LuneSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class UIInputViewController;
@class NSCoder;
SWIFT_CLASS("_TtC7LuneSDK13BaseLuneField")
@interface BaseLuneField : UITextField
@property (nonatomic, strong) UIInputViewController * _Nullable inputViewController;
@property (nonatomic, strong) UIInputViewController * _Nullable inputAccessoryViewController;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7LuneSDK9LuneError")
@interface LuneError : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class UIViewController;
SWIFT_CLASS("_TtC7LuneSDK18LuneSDKObjcManager")
@interface LuneSDKObjcManager : NSObject
/// Create a new <code>LuneSDKObjcManager</code> instance to manage Lune components
/// This manager instance can then be used to load components, set up analytics,
/// callbacks, notifiers and error loggers later on.
/// \param baseUrl The backend host you want to connect to.
///
/// \param token A token for Lune to identify the end-user. It is most-likely not your app’s JWT
///
/// \param localizationTableName If you use multiple localization tables, specify which one you want the SDK to use.
///
///
/// returns:
/// The new <code>LuneSDKObjcManager</code> instance.
- (nonnull instancetype)initWithBaseUrl:(NSString * _Nonnull)baseUrl token:(NSString * _Nonnull)token localizationTableName:(NSString * _Nullable)localizationTableName OBJC_DESIGNATED_INITIALIZER;
/// Render an interactive donut chart to show the user an aggregation of his expenses
/// across multiple categories within a time period.
/// The donut chart has annotations (with icons) for each category and users can tap on each
/// category to see a breakdown of the transactions in each category.
/// The chart shows a maximum of 5 annotations. This is to conform to best practices that ensure
/// that the chart always remains clean and usable.
/// If there are expenses across more than 5 categories, the chart will show the top 4 as usual,
/// and group all the other categories into a generic “Others” category.
/// \param startDate The earliest date to pick transactions from.
///
/// \param endDate The last date to pick transactions from.
///
///
/// returns:
/// The new <code>CategorySpendChartComponent</code> view.
- (UIViewController * _Nonnull)CategorySpendChartComponentWithStartDate:(NSString * _Nullable)startDate endDate:(NSString * _Nullable)endDate SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive list of all the brands the user has spent on within a time period.
/// The user will be able to tap on each brand to see the related transactions.
///
/// returns:
/// The new <code>BrandListComponent</code> view.
- (UIViewController * _Nonnull)BrandListComponent SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive list of all the transactions the user has made within a time period.
/// The list can be filtered by dates, category, custom transaction tags.
/// The list can also be searched and sorted by date and amount.
/// If users submit feedback for any transactions, they can find them easily using the reported switch in this view.
///
/// returns:
/// The new <code>TransactionListComponent</code> view.
- (UIViewController * _Nonnull)TransactionListComponent SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive breakdown of the user’s budgets and their related expenses
/// Users are also allowed to set budgets if they don’t have one already, and edit them when they need to.
///
/// returns:
/// The new <code>BudgetComponent</code> view.
- (UIViewController * _Nonnull)BudgetComponent SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive breakdown of the user’s cashflow within a time period.
/// The user will be able to drill down on <code>Income</code> and <code>Expenses</code> to see the related transactions.
///
/// returns:
/// The new <code>CashflowComponent</code> view.
- (UIViewController * _Nonnull)CashflowComponent SWIFT_WARN_UNUSED_RESULT;
/// Render a donut chart to show the user his gross expense and income within a time period.
/// This component is not interactive. It just shows data for now.
/// \param startDate The earliest date to pick transactions from.
///
/// \param endDate The last date to pick transactions from.
///
///
/// returns:
/// The new <code>CashflowChartComponent</code> view.
- (UIViewController * _Nonnull)CashflowChartComponentWithStartDate:(NSString * _Nullable)startDate endDate:(NSString * _Nullable)endDate SWIFT_WARN_UNUSED_RESULT;
/// Render a bar chart to show the user his expenses across different categories within a time period.
/// This component is not interactive. It just shows data for now.
/// \param startDate The earliest date to pick transactions from.
///
/// \param endDate The last date to pick transactions from.
///
/// \param excludeTransfers Whether to hide the <code>Transfers</code> category.
///
///
/// returns:
/// The new <code>CategoryTrendChartComponent</code> view.
- (UIViewController * _Nonnull)CategoryTrendChartComponentWithStartDate:(NSString * _Nullable)startDate endDate:(NSString * _Nullable)endDate excludeTransfers:(BOOL)excludeTransfers SWIFT_WARN_UNUSED_RESULT;
/// Render a bar chart to show the user his expenses across different brands within a time period.
/// This component is not interactive. It just shows data for now.
/// \param startDate The earliest date to pick transactions from.
///
/// \param endDate The last date to pick transactions from.
///
/// \param excludeTransfers Whether to omit transactions with the <code>Transfers</code> category while processing.
///
///
/// returns:
/// The new <code>BrandTrendChartComponent</code> view.
- (UIViewController * _Nonnull)BrandTrendChartComponentWithStartDate:(NSString * _Nullable)startDate endDate:(NSString * _Nullable)endDate excludeTransfers:(BOOL)excludeTransfers SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive list of all the categories the user has spent on within a time period.
/// The user will be able to tap on each category to see the related transactions.
///
/// returns:
/// The new <code>CategorySpendListComponent</code> view.
- (UIViewController * _Nonnull)CategorySpendListComponent SWIFT_WARN_UNUSED_RESULT;
/// Render details of a specific transaction.
/// The user will be able to add notes and custom tags for personalized organization.
/// The user will also be able to give feedback about the transaction, in instances where
/// the transaction enrichment details can be improved.
/// The users feedback status can also be tracked here in the detail component.
/// \param id The id for the transaction in question.
///
/// \param withNotes Whether to include the note-taking feature.
///
///
/// returns:
/// The new <code>TransactionDetailComponent</code> view.
- (UIViewController * _Nonnull)TransactionDetailComponentWithId:(NSString * _Nonnull)id withNotes:(BOOL)withNotes SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive breakdown of the user’s expenses across brands within a time period.
/// The user will be able to see an interactive <code>BrandTrendChartComponent</code> and the <code>BrandListComponent</code>,
/// along with some filters in the same view.
///
/// returns:
/// The new <code>BrandTrendsComponent</code> view.
- (UIViewController * _Nonnull)BrandTrendsComponent SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive breakdown of the user’s expenses across brands within a time period.
/// The user will be able to see an interactive <code>CategoryTrendChartComponent</code> and the
/// <code>CategorySpendListComponent</code>, along with some filters in the same view.
///
/// returns:
/// The new <code>CategoryTrendsComponent</code> view.
- (UIViewController * _Nonnull)CategoryTrendsComponent SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive breakdown of the user’s expenses within a time period.
/// The user will be able to see the <code>CategorySpendChartComponent</code> and <code>TransactionListComponent</code>,
/// along with some filters in the same view.
///
/// returns:
/// The new <code>ExpenseComponent</code> view.
- (UIViewController * _Nonnull)ExpenseComponent SWIFT_WARN_UNUSED_RESULT;
/// Set up a callback function to receive analytics events from the SDK.
/// You will be responsible for submitting these events to your analytics provider of choice, e.g:
/// Mixpanel, Firebase, etc.
/// \param logger A callback function that occasionally routes events from Lune to your analytics provider.
///
- (void)initializeLoggerWithLogger:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))logger;
/// Set up a callback function to receive success notification messages from the SDK.
/// The SDK has it’s internal toast notification mechanism. However, it allows you to
/// handle such notifications yourself, if you so prefer. This allows you to maintain a consistent experience with
/// toast throughout your app
/// \param notifier A callback function presents provided success notifications to the user.
///
- (void)setUpSuccessNotifier:(void (^ _Nonnull)(NSString * _Nonnull))notifier;
/// Set up a callback function to receive error notification messages from the SDK.
/// The SDK has it’s internal toast notification mechanism. However, it allows you to
/// handle such notifications yourself, if you so prefer. This allows you to maintain a consistent experience with
/// toast throughout your app
/// \param notifier A callback function presents provided error notifications to the user.
///
- (void)setUpErrorNotifier:(void (^ _Nonnull)(NSString * _Nonnull))notifier;
/// Set up a callback function to receive error objects from the SDK.
/// The SDK can report errors caught internally to your app so that you can track them in application
/// monitoring software like Sentry, etc. This gives you more visibility into what your end users may be
/// experiencing when they user your app as a whole.
/// \param logger A callback function that occasionally routes events from Lune to your application monitoring software
///
- (void)setUpErrorLogger:(void (^ _Nonnull)(LuneError * _Nonnull))logger;
/// Set up a callback function to provide a new token when the current one expires.
/// The SDK offloads authentication to you in a bid to keep your PII solely in your systems.
/// Hence, when the initially provided token expires, the SDK will call this function to request a new one.
/// \param callback A callback function that returns a new token when requested
///
- (void)setupRefreshCallback:(void (^ _Nullable)(void (^ _Nonnull)(NSString * _Nullable)))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef LUNESDK_SWIFT_H
#define LUNESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LuneSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class UIInputViewController;
@class NSCoder;
SWIFT_CLASS("_TtC7LuneSDK13BaseLuneField")
@interface BaseLuneField : UITextField
@property (nonatomic, strong) UIInputViewController * _Nullable inputViewController;
@property (nonatomic, strong) UIInputViewController * _Nullable inputAccessoryViewController;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7LuneSDK9LuneError")
@interface LuneError : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class UIViewController;
SWIFT_CLASS("_TtC7LuneSDK18LuneSDKObjcManager")
@interface LuneSDKObjcManager : NSObject
/// Create a new <code>LuneSDKObjcManager</code> instance to manage Lune components
/// This manager instance can then be used to load components, set up analytics,
/// callbacks, notifiers and error loggers later on.
/// \param baseUrl The backend host you want to connect to.
///
/// \param token A token for Lune to identify the end-user. It is most-likely not your app’s JWT
///
/// \param localizationTableName If you use multiple localization tables, specify which one you want the SDK to use.
///
///
/// returns:
/// The new <code>LuneSDKObjcManager</code> instance.
- (nonnull instancetype)initWithBaseUrl:(NSString * _Nonnull)baseUrl token:(NSString * _Nonnull)token localizationTableName:(NSString * _Nullable)localizationTableName OBJC_DESIGNATED_INITIALIZER;
/// Render an interactive donut chart to show the user an aggregation of his expenses
/// across multiple categories within a time period.
/// The donut chart has annotations (with icons) for each category and users can tap on each
/// category to see a breakdown of the transactions in each category.
/// The chart shows a maximum of 5 annotations. This is to conform to best practices that ensure
/// that the chart always remains clean and usable.
/// If there are expenses across more than 5 categories, the chart will show the top 4 as usual,
/// and group all the other categories into a generic “Others” category.
/// \param startDate The earliest date to pick transactions from.
///
/// \param endDate The last date to pick transactions from.
///
///
/// returns:
/// The new <code>CategorySpendChartComponent</code> view.
- (UIViewController * _Nonnull)CategorySpendChartComponentWithStartDate:(NSString * _Nullable)startDate endDate:(NSString * _Nullable)endDate SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive list of all the brands the user has spent on within a time period.
/// The user will be able to tap on each brand to see the related transactions.
///
/// returns:
/// The new <code>BrandListComponent</code> view.
- (UIViewController * _Nonnull)BrandListComponent SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive list of all the transactions the user has made within a time period.
/// The list can be filtered by dates, category, custom transaction tags.
/// The list can also be searched and sorted by date and amount.
/// If users submit feedback for any transactions, they can find them easily using the reported switch in this view.
///
/// returns:
/// The new <code>TransactionListComponent</code> view.
- (UIViewController * _Nonnull)TransactionListComponent SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive breakdown of the user’s budgets and their related expenses
/// Users are also allowed to set budgets if they don’t have one already, and edit them when they need to.
///
/// returns:
/// The new <code>BudgetComponent</code> view.
- (UIViewController * _Nonnull)BudgetComponent SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive breakdown of the user’s cashflow within a time period.
/// The user will be able to drill down on <code>Income</code> and <code>Expenses</code> to see the related transactions.
///
/// returns:
/// The new <code>CashflowComponent</code> view.
- (UIViewController * _Nonnull)CashflowComponent SWIFT_WARN_UNUSED_RESULT;
/// Render a donut chart to show the user his gross expense and income within a time period.
/// This component is not interactive. It just shows data for now.
/// \param startDate The earliest date to pick transactions from.
///
/// \param endDate The last date to pick transactions from.
///
///
/// returns:
/// The new <code>CashflowChartComponent</code> view.
- (UIViewController * _Nonnull)CashflowChartComponentWithStartDate:(NSString * _Nullable)startDate endDate:(NSString * _Nullable)endDate SWIFT_WARN_UNUSED_RESULT;
/// Render a bar chart to show the user his expenses across different categories within a time period.
/// This component is not interactive. It just shows data for now.
/// \param startDate The earliest date to pick transactions from.
///
/// \param endDate The last date to pick transactions from.
///
/// \param excludeTransfers Whether to hide the <code>Transfers</code> category.
///
///
/// returns:
/// The new <code>CategoryTrendChartComponent</code> view.
- (UIViewController * _Nonnull)CategoryTrendChartComponentWithStartDate:(NSString * _Nullable)startDate endDate:(NSString * _Nullable)endDate excludeTransfers:(BOOL)excludeTransfers SWIFT_WARN_UNUSED_RESULT;
/// Render a bar chart to show the user his expenses across different brands within a time period.
/// This component is not interactive. It just shows data for now.
/// \param startDate The earliest date to pick transactions from.
///
/// \param endDate The last date to pick transactions from.
///
/// \param excludeTransfers Whether to omit transactions with the <code>Transfers</code> category while processing.
///
///
/// returns:
/// The new <code>BrandTrendChartComponent</code> view.
- (UIViewController * _Nonnull)BrandTrendChartComponentWithStartDate:(NSString * _Nullable)startDate endDate:(NSString * _Nullable)endDate excludeTransfers:(BOOL)excludeTransfers SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive list of all the categories the user has spent on within a time period.
/// The user will be able to tap on each category to see the related transactions.
///
/// returns:
/// The new <code>CategorySpendListComponent</code> view.
- (UIViewController * _Nonnull)CategorySpendListComponent SWIFT_WARN_UNUSED_RESULT;
/// Render details of a specific transaction.
/// The user will be able to add notes and custom tags for personalized organization.
/// The user will also be able to give feedback about the transaction, in instances where
/// the transaction enrichment details can be improved.
/// The users feedback status can also be tracked here in the detail component.
/// \param id The id for the transaction in question.
///
/// \param withNotes Whether to include the note-taking feature.
///
///
/// returns:
/// The new <code>TransactionDetailComponent</code> view.
- (UIViewController * _Nonnull)TransactionDetailComponentWithId:(NSString * _Nonnull)id withNotes:(BOOL)withNotes SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive breakdown of the user’s expenses across brands within a time period.
/// The user will be able to see an interactive <code>BrandTrendChartComponent</code> and the <code>BrandListComponent</code>,
/// along with some filters in the same view.
///
/// returns:
/// The new <code>BrandTrendsComponent</code> view.
- (UIViewController * _Nonnull)BrandTrendsComponent SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive breakdown of the user’s expenses across brands within a time period.
/// The user will be able to see an interactive <code>CategoryTrendChartComponent</code> and the
/// <code>CategorySpendListComponent</code>, along with some filters in the same view.
///
/// returns:
/// The new <code>CategoryTrendsComponent</code> view.
- (UIViewController * _Nonnull)CategoryTrendsComponent SWIFT_WARN_UNUSED_RESULT;
/// Render an interactive breakdown of the user’s expenses within a time period.
/// The user will be able to see the <code>CategorySpendChartComponent</code> and <code>TransactionListComponent</code>,
/// along with some filters in the same view.
///
/// returns:
/// The new <code>ExpenseComponent</code> view.
- (UIViewController * _Nonnull)ExpenseComponent SWIFT_WARN_UNUSED_RESULT;
/// Set up a callback function to receive analytics events from the SDK.
/// You will be responsible for submitting these events to your analytics provider of choice, e.g:
/// Mixpanel, Firebase, etc.
/// \param logger A callback function that occasionally routes events from Lune to your analytics provider.
///
- (void)initializeLoggerWithLogger:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))logger;
/// Set up a callback function to receive success notification messages from the SDK.
/// The SDK has it’s internal toast notification mechanism. However, it allows you to
/// handle such notifications yourself, if you so prefer. This allows you to maintain a consistent experience with
/// toast throughout your app
/// \param notifier A callback function presents provided success notifications to the user.
///
- (void)setUpSuccessNotifier:(void (^ _Nonnull)(NSString * _Nonnull))notifier;
/// Set up a callback function to receive error notification messages from the SDK.
/// The SDK has it’s internal toast notification mechanism. However, it allows you to
/// handle such notifications yourself, if you so prefer. This allows you to maintain a consistent experience with
/// toast throughout your app
/// \param notifier A callback function presents provided error notifications to the user.
///
- (void)setUpErrorNotifier:(void (^ _Nonnull)(NSString * _Nonnull))notifier;
/// Set up a callback function to receive error objects from the SDK.
/// The SDK can report errors caught internally to your app so that you can track them in application
/// monitoring software like Sentry, etc. This gives you more visibility into what your end users may be
/// experiencing when they user your app as a whole.
/// \param logger A callback function that occasionally routes events from Lune to your application monitoring software
///
- (void)setUpErrorLogger:(void (^ _Nonnull)(LuneError * _Nonnull))logger;
/// Set up a callback function to provide a new token when the current one expires.
/// The SDK offloads authentication to you in a bid to keep your PII solely in your systems.
/// Hence, when the initially provided token expires, the SDK will call this function to request a new one.
/// \param callback A callback function that returns a new token when requested
///
- (void)setupRefreshCallback:(void (^ _Nullable)(void (^ _Nonnull)(NSString * _Nullable)))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
